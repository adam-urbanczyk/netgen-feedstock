diff --git a/CMakeLists.txt b/CMakeLists.txt
index ef0ee42..849b4c9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,15 +22,6 @@ option( USE_SUPERBUILD       "use ccache" ON)
 
 set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_modules")
 
-if(APPLE)
-  set(INSTALL_DIR_DEFAULT /Applications/Netgen.app)
-else(APPLE)
-  if(WIN32)
-    set(INSTALL_DIR_DEFAULT "C:/netgen")
-  else(WIN32)
-    set(INSTALL_DIR_DEFAULT /opt/netgen)
-  endif(WIN32)
-endif(APPLE)
 
 if(INSTALL_DIR)
   message(WARNING "INSTALL_DIR is deprecated, use CMAKE_INSTALL_PREFIX instead")
@@ -112,35 +103,25 @@ if(USE_PYTHON)
     find_package(PythonInterp 3 REQUIRED)
     find_package(PythonLibs 3 REQUIRED)
 
-    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "from distutils.sysconfig import get_python_lib; print(get_python_lib(1,0,''))" OUTPUT_VARIABLE PYTHON_PACKAGES_INSTALL_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)
+    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())" OUTPUT_VARIABLE PYTHON_PACKAGES_INSTALL_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)
     file(TO_CMAKE_PATH ${PYTHON_PACKAGES_INSTALL_DIR} PYTHON_PACKAGES_INSTALL_DIR)
 endif(USE_PYTHON)
 
 set(NG_INSTALL_SUFFIX netgen CACHE STRING "Suffix appended to install directories (project name)")
 
-if(APPLE)
-  set(NG_INSTALL_DIR_BIN_DEFAULT Contents/MacOS)
-  set(NG_INSTALL_DIR_LIB_DEFAULT Contents/MacOS)
-  set(NG_INSTALL_DIR_CMAKE_DEFAULT Contents/Resources/CMake)
-  set(NG_INSTALL_DIR_PYTHON_DEFAULT Contents/Resources/${PYTHON_PACKAGES_INSTALL_DIR})
-  set(NG_INSTALL_DIR_RES_DEFAULT Contents/Resources/share)
-  set(NG_INSTALL_DIR_INCLUDE_DEFAULT Contents/Resources/include)
-
-  set(NG_RPATH_TOKEN "@loader_path")
-else(APPLE)
-  set(NG_INSTALL_DIR_BIN_DEFAULT bin)
-  set(NG_INSTALL_DIR_LIB_DEFAULT lib)
-  if(WIN32)
-    set(NG_INSTALL_DIR_CMAKE_DEFAULT cmake)
-  else(WIN32)
-    set(NG_INSTALL_DIR_CMAKE_DEFAULT lib/cmake/${NG_INSTALL_SUFFIX})
-  endif(WIN32)
-  set(NG_INSTALL_DIR_PYTHON_DEFAULT ${PYTHON_PACKAGES_INSTALL_DIR})
-  set(NG_INSTALL_DIR_RES_DEFAULT share)
-  set(NG_INSTALL_DIR_INCLUDE_DEFAULT include)
-
-  set(NG_RPATH_TOKEN "\$ORIGIN")
-endif(APPLE)
+
+set(NG_INSTALL_DIR_BIN_DEFAULT bin)
+set(NG_INSTALL_DIR_LIB_DEFAULT lib)
+if(WIN32)
+  set(NG_INSTALL_DIR_CMAKE_DEFAULT cmake)
+else(WIN32)
+  set(NG_INSTALL_DIR_CMAKE_DEFAULT lib/cmake/${NG_INSTALL_SUFFIX})
+endif(WIN32)
+set(NG_INSTALL_DIR_PYTHON_DEFAULT ${PYTHON_PACKAGES_INSTALL_DIR})
+set(NG_INSTALL_DIR_RES_DEFAULT share)
+set(NG_INSTALL_DIR_INCLUDE_DEFAULT include)
+
+set(NG_RPATH_TOKEN "\$ORIGIN")
 
 set(NG_INSTALL_DIR_PYTHON ${NG_INSTALL_DIR_PYTHON_DEFAULT} CACHE STRING "Install directory for Python files")
 set(NG_INSTALL_DIR_BIN ${NG_INSTALL_DIR_BIN_DEFAULT} CACHE STRING "Install directory for executables")
@@ -217,9 +198,6 @@ else(WIN32)
     # build shared libraries
     set(NG_LIB_TYPE SHARED)
 endif(WIN32)
-if(APPLE)
-    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -undefined dynamic_lookup")
-endif(APPLE)
 
 #######################################################################
 if(NOT ZLIB_INCLUDE_DIRS)
@@ -257,12 +235,8 @@ endif (USE_GUI)
 #######################################################################
 if (USE_PYTHON)
     add_definitions(-DNG_PYTHON)
-    find_path(PYBIND_INCLUDE_DIR pybind11/pybind11.h HINTS ${PYTHON_INCLUDE_DIR})
-    if( PYBIND_INCLUDE_DIR )
-        message(STATUS "Found Pybind11: ${PYBIND_INCLUDE_DIR}")
-    else( PYBIND_INCLUDE_DIR )
-        message(FATAL_ERROR "Could NOT find pybind11!")
-    endif( PYBIND_INCLUDE_DIR )
+    find_package(pybind11 REQUIRED)
+    set(PYBIND_INCLUDE_DIR PYBIND11_INCLUDE_DIR)
 
     include_directories(${PYBIND_INCLUDE_DIR})
     include_directories(${PYTHON_INCLUDE_DIRS})
@@ -359,90 +333,6 @@ add_subdirectory(tests)
 #######################################################################
 # Debian packager
 
-if(UNIX)
-    set(CPACK_SOURCE_GENERATOR "TGZ")
-    set(CPACK_SOURCE_IGNORE_FILES "/cmake/;/build/;/.gz/;~$;${CPACK_SOURCE_IGNORE_FILES}")
-    set(CPACK_PACKAGE_VERSION ${PACKAGE_VERSION} )
-
-    set(CPACK_PACKAGE_NAME netgen)
-    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "automatic 3d tetrahedral mesh generator")
-    set(CPACK_PACKAGE_DESCRIPTION "NETGEN is an automatic 3d tetrahedral mesh generator. It accepts input from constructive solid geometry (CSG) or boundary representation (BRep) from STL file format. The connection to a geometry kernel allows the handling of IGES and STEP files. NETGEN contains modules for mesh optimization and hierarchical mesh refinement. Netgen is open source based on the LGPL license. It is available for Unix/Linux and Windows.")
-
-    set(CPACK_PACKAGING_INSTALL_PREFIX "/opt/netgen")
-    execute_process(COMMAND grep CODENAME /etc/lsb-release OUTPUT_VARIABLE temp OUTPUT_STRIP_TRAILING_WHITESPACE)
-    execute_process(COMMAND dpkg --print-architecture OUTPUT_VARIABLE CPACK_DEBIAN_PACKAGE_ARCHITECTURE OUTPUT_STRIP_TRAILING_WHITESPACE)
-    if(temp)
-        set(CPACK_GENERATOR "DEB")
-        string(SUBSTRING ${temp} 17 -1 UBUNTU_VERSION)
-        message("ubuntu version: ${UBUNTU_VERSION}")
-
-        set(CPACK_DEBIAN_PACKAGE_DEPENDS "python3, libtk8.5, libtcl8.5, tix, libxmu6")
-        execute_process(COMMAND dpkg --print-architecture OUTPUT_VARIABLE CPACK_DEBIAN_PACKAGE_ARCHITECTURE OUTPUT_STRIP_TRAILING_WHITESPACE)
-        set(CPACK_DEBIAN_PACKAGE_MAINTAINER "Matthias Hochsteger <matthias.hochsteger@tuwien.ac.at>")
-        if(USE_MPI)
-            set(CPACK_DEBIAN_PACKAGE_DEPENDS "${CPACK_DEBIAN_PACKAGE_DEPENDS}, libmetis5, openmpi-bin")
-            set(CPACK_PACKAGE_NAME "${CPACK_PACKAGE_NAME}_mpi")
-        endif(USE_MPI)
-        if(USE_OCC)
-            set(CPACK_DEBIAN_PACKAGE_DEPENDS "${CPACK_DEBIAN_PACKAGE_DEPENDS}, liboce-ocaf-dev")
-        endif(USE_OCC)
-        set(CPACK_DEBIAN_PACKAGE_SECTION Science)
-        set(CPACK_DEBIAN_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
-        set(CPACK_PACKAGE_FILE_NAME "netgen-${PACKAGE_VERSION}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")   
-    endif(temp)
-endif(UNIX)
-
-if(APPLE)
-    # create some auxiliary files
-    set(mac_startup ${CMAKE_CURRENT_BINARY_DIR}/startup.sh)
-    file(WRITE ${mac_startup} "\
-#!/bin/sh
-Netgen_BUNDLE=\"`echo \"$0\" | sed -e 's/\\/Contents\\/MacOS\\/startup.sh//'`\"
-Netgen_MACOS=\"$Netgen_BUNDLE/Contents/MacOS\"
-export NETGENDIR=$Netgen_MACOS  
-export DYLD_LIBRARY_PATH=$Netgen_MACOS:$DYLD_LIBRARY_PATH
-# export TIX_LIBRARY=$Netgen_MACOS/library
-# export TCLLIBPATH=$Netgen_MACOS:$TCLLIBPATH
-export PYTHONPATH=$Netgen_BUNDLE/Contents/Resources/${PYTHON_PACKAGES_INSTALL_DIR}:$PYTHONPATH
-cd $Netgen_MACOS
-$Netgen_MACOS/netgen
-")
-    install(PROGRAMS ${mac_startup} DESTINATION ${NG_INSTALL_DIR_BIN})
-
-    set(mac_ngsuite ${CMAKE_CURRENT_BINARY_DIR}/ngsuite.sh)
-    file(WRITE ${mac_ngsuite} "\
-#!/bin/sh
-Netgen_BUNDLE=\"`echo \"$0\" | sed -e 's/\\/Contents\\/MacOS\\/Netgen1//'`\"
-Netgen_MACOS=\"$Netgen_BUNDLE/Contents/MacOS\"
-open -a /Applications/Utilities/Terminal.app $Netgen_MACOS/startup.sh
-")
-    install(PROGRAMS ${mac_ngsuite} DESTINATION ${NG_INSTALL_DIR_BIN} RENAME Netgen1)
-
-    set(mac_plist ${CMAKE_CURRENT_BINARY_DIR}/Info.plist)
-    file(WRITE ${mac_plist} "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
-<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
-<plist version=\"1.0\">
-<dict>
-	<key>CFBundleDevelopmentRegion</key>
-	<string>English</string>
-	<key>CFBundleExecutable</key>
-	<string>Netgen1</string>
-	<key>CFBundleIconFile</key>
-	<string>Netgen.icns</string>
-        <key>NSHighResolutionCapable</key>
-        <string>True</string>
-</dict>
-</plist>
-")
-    install(FILES ${mac_plist} DESTINATION ${NG_INSTALL_DIR_BIN}/../)
-    install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/netgen.icns DESTINATION ${NG_INSTALL_DIR_RES}/../ RENAME Netgen.icns)
-
-endif(APPLE)
-
-if(NOT APPLE)
-  include(CPack) 
-endif()
-
 #######################################################################
 # uninstall target
 configure_file(
